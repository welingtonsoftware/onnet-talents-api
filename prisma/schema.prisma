datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Applicant {
  id               Int         @id @default(autoincrement())
  name             String
  email            String
  phone            String
  cpf              String
  sexo             String
  rg               String
  schooling        Int
  employmentStatus Int
  birthDate        DateTime
  note             String
  complement       String?
  number           String?
  create_at        DateTime    @default(now())
  locationId       Int?
  addressId        Int?
  stageId          Int?
  functionId       Int?
  Location         Location?   @relation(fields: [locationId], references: [id])
  Address          Address?    @relation(fields: [addressId], references: [id])
  Stage            Stage?      @relation(fields: [stageId], references: [id])
  Function         Function?   @relation(fields: [functionId], references: [id])
  Document         Document[]
  Interview        Interview[]
}

model Document {
  id          Int       @id @default(autoincrement())
  type        Int
  path        String
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
}

model Sector {
  id          Int        @id @default(autoincrement())
  name_sector String
  note        String?
  create_at   DateTime   @default(now())
  Function    Function[]
}

model Function {
  id        Int         @id @default(autoincrement())
  function  String
  create_at DateTime    @default(now())
  active    Boolean
  sectorId  Int         @default(1)
  Sector    Sector      @relation(fields: [sectorId], references: [id])
  Applicant Applicant[]
}

model Location {
  id        Int         @id @default(autoincrement())
  unit      String
  note      String?
  create_at DateTime    @default(now())
  Applicant Applicant[]
}

model Address {
  id             Int          @id @default(autoincrement())
  addres_name    String
  cep            String?
  create_at      DateTime     @default(now())
  neighborhoodId Int
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  Applicant      Applicant[]
}

model Neighborhood {
  id                Int       @id @default(autoincrement())
  neighborhood_name String
  create_at         DateTime  @default(now())
  cityId            Int
  city              City      @relation(fields: [cityId], references: [id])
  addresses         Address[]
}

model City {
  id           Int            @id @default(autoincrement())
  city_name    String
  ibge         String
  uf           String         @db.Char(2)
  create_at    DateTime       @default(now())
  Neighborhood Neighborhood[]
}

model Stage {
  id        Int         @id @default(autoincrement())
  stage     String      @db.VarChar(250)
  note      String?
  create_at DateTime    @default(now())
  value     String?
  active    Boolean
  Applicant Applicant[]
}

model Search {
  id           Int            @id @default(autoincrement())
  type         String         @db.VarChar(250)
  active       Boolean
  create_at    DateTime       @default(now())
  Interview    Interview[]
  Search_quest Search_quest[]
}

model Interview {
  id             Int       @id @default(autoincrement())
  date_interview DateTime
  note           String?
  create_at      DateTime  @default(now())
  searchId       Int?
  search         Search?   @relation(fields: [searchId], references: [id])
  applicantId    Int
  applicant      Applicant @relation(fields: [applicantId], references: [id])
  Answer         Answer[]
}

model Search_quest {
  id        Int      @id @default(autoincrement())
  create_at DateTime @default(now())
  searchId  Int
  search    Search   @relation(fields: [searchId], references: [id])
  questId   Int
  quest     Quest    @relation(fields: [questId], references: [id])
}

model Quest {
  id           Int            @id @default(autoincrement())
  quest        String         @db.VarChar(500)
  create_at    DateTime       @default(now())
  active       Boolean
  Search_quest Search_quest[]
  Answer       Answer[]
}

model Answer {
  id          Int       @id @default(autoincrement())
  answer_text String
  correct     Boolean
  create_at   DateTime  @default(now())
  questId     Int
  quest       Quest     @relation(fields: [questId], references: [id])
  interviewId Int
  interview   Interview @relation(fields: [interviewId], references: [id])
}
